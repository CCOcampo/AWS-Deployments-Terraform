# PROVIDER
provider "aws" {
  region = var.aws_region
}

# VPC
resource "aws_vpc" "main_vpc" {
  cidr_block = var.vpc_cidr_block
  tags = {
    Name = "MainVPC"
  }
}
# Public Subnet
resource "aws_subnet" "public_subnet" {
  vpc_id            = aws_vpc.main_vpc.id
  cidr_block        = var.public_subnet_cidr
  availability_zone = var.public_subnet_az
  map_public_ip_on_launch = true

  tags = {
    Name = "PublicSubnet"
  }
}

# Private Subnet
resource "aws_subnet" "private_subnet" {
  vpc_id            = aws_vpc.main_vpc.id
  cidr_block        = var.private_subnet_cidr
  availability_zone = var.private_subnet_az

  tags = {
    Name = "PrivateSubnet"
  }
}
# Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main_vpc.id

  tags = {
    Name = "MainIGW"
  }
}

# Route Table for Public Subnet
resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.main_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "PublicRouteTable"
  }
}

# Associate Public Route Table with Public Subnet
resource "aws_route_table_association" "public_subnet_association" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_route_table.id
}

# Security Group for Instances
resource "aws_security_group" "instance_sg" {
  vpc_id = aws_vpc.main_vpc.id

  ingress {
    from_port   = 22              
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]    
  }
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "InstanceSecurityGroup"
  }
}

# EC2 Instances
resource "aws_instance" "web" {
  count         = 2
  ami           = var.ami_id
  instance_type = var.instance_type
  subnet_id     = aws_subnet.public_subnet.id
  security_groups = [aws_security_group.instance_sg.id]


  user_data = <<-EOF
      #!/bin/bash
      # Actualizar los paquetes del sistema
      sudo dnf update -y

      # Instalar Apache
      sudo dnf install httpd -y

      # Iniciar el servicio Apache
      sudo systemctl start httpd

      # Hacer que Apache se inicie automáticamente al arrancar
      sudo systemctl enable httpd

      # Obtener el nombre de la instancia y la IP pública
      INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
      PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
      INSTANCE_NAME="WebServer${count.index + 1}"

      # Crear un archivo index.html con un mensaje personalizado y fuente más grande
      echo "<html><body><h1 style='font-size:50px; color:blue;'>¡Hola Mundo desde la instancia $INSTANCE_NAME!</h1></body></html>" | sudo tee /var/www/html/index.html

      # Asegurarse de que el directorio /var/www/html tenga los permisos correctos
      sudo chmod -R 755 /var/www/html
  EOF

  tags = {
    Name = "WebServer${count.index + 1}"
  }
}

# Classic Load Balancer
resource "aws_elb" "app_clb" {
  name = "classic-lb"
  security_groups = [aws_security_group.instance_sg.id]
  subnets = [aws_subnet.public_subnet.id]  
  listener {
    instance_port     = 80
    instance_protocol = "HTTP"
    lb_port           = 80
    lb_protocol       = "HTTP"
  }

  instances = aws_instance.web[*].id

  health_check {
    target              = "HTTP:80/"
    interval            = 30
    timeout             = 10
    healthy_threshold   = 2
    unhealthy_threshold = 5
  }

  tags = {
    Name = "LoadBalancer"
  }
}